const path = require('path');
const { fse } = require('@sap/cds-foss');

const Logger = require('./helper/logging');

const MTX_URL_PATH_PREFIX = 'mtx/v1/model/';
const CUSTOM_FILE_URL_SUFFIX = 'customTenantContent';

module.exports = class BaseCommand {

    static get CUSTOM_FILE_URL_SUFFIX() { return CUSTOM_FILE_URL_SUFFIX; }

    static async checkProject(folder) {
        return fse.pathExists(path.join(folder, 'package.json'));
    }

    static async handleHttpError(error, params) {
        if (!('isAxiosError' in error)) {
            throw error;
        }

        switch (error.response && error.response.status) {
            case 401:
                Logger.error('Request failed: authorization might have expired. Please retry with valid passcode' +
                    (params.has('passcodeUrl') ? ` from ${params.get('passcodeUrl')}` : ''), error);
                break;
            case 404:
                Logger.error(`Request failed. Please check application URL ${params.get('appUrl')}`, error);
                break;
            default:
                // Including 422 (compilation or native-extension error).
                Logger.error(undefined, error);
        }
    }

    static concatUrls(base, ...paths) {
        function trimBeginSlash(str) {
            return str.replace(/^\//, '');
        }
        function trimEndSlash(str) {
            return str.replace(/\/$/, '');
        }
        function trimSlashes(str) {
            return trimBeginSlash(trimEndSlash(str));
        }
        const concatenated = new URL(base);
        concatenated.pathname = trimEndSlash(concatenated.pathname) + '/' +
            paths.map((p, i) => i < paths.length - 1 ? trimSlashes(p) : trimBeginSlash(p)).join('/');
        return concatenated.toString();
    }

    static getMtxApiUrl(url, action) {
        return BaseCommand.concatUrls(url, MTX_URL_PATH_PREFIX, action);
    }

    static getMtxApiUrlSync(url, action) {
        return BaseCommand.concatUrls(url, MTX_URL_PATH_PREFIX, action);
    }
}
