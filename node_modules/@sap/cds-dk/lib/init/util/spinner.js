
const SPINNER_THEMES = {
    spin: ['—', '\\', '|', '/'],
    bounce: ['_', '—', '‾', '—', '/', '|', '/', '—'],
    balloon: ['o', 'O']
}

const RENDER_DELAY = 1000;

const ESC_SEQ = '\u001B[';
const HIDE_CURSOR = ESC_SEQ + '?25l';
const SHOW_CURSOR = ESC_SEQ + '?25h';
const MOVE_CURSOR_UP = ESC_SEQ + '1A';
const ERASE_LINE = ESC_SEQ + 'K';
// const MOVE_CURSOR_START = '\r';
// const SAVE_CURSOR = ESC_SEQ + 's';
// const RESTORE_CURSOR = ESC_SEQ + 'u';

class Spinner {
    constructor(logger, theme = Spinner.THEME_SPIN, initialDelay = 1000) {
        this.logger = logger;
        this.theme = theme;
        this.initialDelay = initialDelay;
    }

    static get THEME_RANDOM() {
        const keys = Object.keys(SPINNER_THEMES);
        const idx = Math.round(Math.random() * (keys.length - 1));
        return keys[idx];
    }

    async run(msg, cb, postfix = '') {
        try {
            this._start(msg);
            // use return await to catch errors here
            return await cb();
        } finally {
            this._stop(msg, postfix);
        }
    }

    _start(msg) {
        if (!this.logger.isDebug && this.logger.isTTY) {
            this.logger.log(msg + HIDE_CURSOR + ERASE_LINE + MOVE_CURSOR_UP);
            this.timeoutId = setTimeout(() => {
                let idx = 0;
                this.intervalId = setInterval(() => {
                    this.logger.log(msg + ' ' + SPINNER_THEMES[this.theme][idx] + ERASE_LINE + MOVE_CURSOR_UP);
                    idx = (idx + 1) % SPINNER_THEMES[this.theme].length;
                }, RENDER_DELAY);
            }, this.initialDelay);
        } else {
            this.logger.log(msg);
        }
    }

    _stop(msg, postfix) {
        if (!this.logger.isDebug && this.logger.isTTY) {
            if (this.timeoutId) {
                clearTimeout(this.timeoutId);
                this.timeoutId = null;
            }

            if (this.intervalId) {
                clearInterval(this.intervalId);
                this.intervalId = null;
            }

            this.logger.log(SHOW_CURSOR + msg + ' ' + postfix + ERASE_LINE);
        }
    }
}

Spinner.THEME_SPIN = 'spin';
Spinner.THEME_BOUNCE = 'bounce';
Spinner.THEME_BALLOON = 'balloon';

module.exports = Spinner;
