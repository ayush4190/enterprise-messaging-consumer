const path = require('path');

const TemplateBase = require('../templateBase');
const { COMMAND_ADD, OPTION_JAVA, OPTION_NODEJS, URLS } = require('../../constants');


module.exports = class NodeJSTemplate extends TemplateBase {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
    }

    async checkEnabled() { //NOSONAR
        if (this.options._cmd === COMMAND_ADD) {
            throw new Error(`You can't change the type of an existing project.`);
        }

        if (this.options.add.has(OPTION_JAVA)) {
            throw new Error(`Only one runtime per project is supported. Specify either ${OPTION_JAVA} or ${OPTION_NODEJS}.`);
        }

        return true;
    }

    async run() {
        const env = await this.getEnv();

        const values = {
            projectName: this.projectName
        }
        await this.templateUtil.copyFiles('.', this.projectPath, values, this.options.force);

        const dbFolderPath = path.join(this.projectPath, env.folders.db);
        await this.fsUtil.mkdirp(dbFolderPath);

        const srvFolderPath = path.join(this.projectPath, env.folders.srv);
        await this.fsUtil.mkdirp(srvFolderPath);

        const appFolderPath = path.join(this.projectPath, env.folders.app);
        await this.fsUtil.mkdirp(appFolderPath);

        // used to call npm install here
    }

    async finalize() {
        const relativeProjectPath = path.relative(this.cwd, this.projectPath);
        if (relativeProjectPath && relativeProjectPath !== '.') {
            this.logger.log(`Continue with 'cd ${relativeProjectPath}'`);
        }

        this.logger.log(`Find samples on ${URLS.SAMPLES}`);
        this.logger.log(`Learn about next steps at ${URLS.CAPIRE}`);
    }
}
