const cds = require ('@sap/cds/lib'), { fs, path } = cds.utils
const TemplateBase = require('../templateBase')
const ProjectReader = require('../../util/projectReader')
const { OPTION_HANA, OPTION_XSUAA } = require('../../constants')

const {
    srvNode, srvJava, // Server
    mtxSidecar, // Additional Modules
    saasRegistry, xsuaa, // BTP Services
    providedMtxAPI, srvAPI, providedMtxSidecarAPI, requiredMtxSidecarAPI // APIs
} = require('../_merging/existences');

module.exports = class MtxTemplate extends TemplateBase {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname)
        this.projectReader = new ProjectReader(this)
    }

    async getDependencies() {
        return [OPTION_HANA, OPTION_XSUAA]
    }

    async runMTAMerging() {
        const projectDescriptor = await this.projectReader.read()

        const mtaYAMLPath = path.join(this.projectPath, 'mta.yaml');

        if (!fs.existsSync(mtaYAMLPath)) return

        const mergingRules = projectDescriptor.cap.isNodejs ?
        {
            existences: [srvNode, saasRegistry, providedMtxAPI, xsuaa],
            overwrites: [{
                in: xsuaa,
                keyPath: ["parameters", "config", "tenant-mode"],
                replacement: "shared"
            }],
            relationships: [{
                in: srvNode,
                inKeyPath: ["requires"],
                into: "name",
                existences: [saasRegistry],
                existenceKeyPath: ["name"],
            }],
        }
        :
        {
            existences: [srvJava, srvAPI, mtxSidecar, xsuaa, saasRegistry, providedMtxSidecarAPI, requiredMtxSidecarAPI],
            overwrites: [{
                in: xsuaa,
                keyPath: ["parameters", "config", "tenant-mode"],
                replacement: "shared"
            }],
            relationships: [{
                in: srvJava,
                inKeyPath: ["requires"],
                into: "name",
                existences: [saasRegistry],
                existenceKeyPath: ["name"],
            }],
        }

        await this.templateUtil.mergeYAML(
            mtaYAMLPath,
            path.join(__dirname, `files`, `mta.yaml.hbs`),
            projectDescriptor,
            mergingRules
        )

        if (projectDescriptor.cap.hasApprouter) {
            const ApprouterTemplate = require(`../approuter`)
            const template = new ApprouterTemplate(this.projectPath, this.generator)
            await template.runMTAMerging()
        }
    }

    async runXSSecurityMerging() {
        const projectDescriptor = await this.projectReader.read()
        await this.templateUtil.mergeJSON(
            path.join(this.projectPath, 'xs-security.json'),
            path.join(__dirname, 'files', 'xs-security.json.hbs'),
            projectDescriptor,
            {
                existences: [{
                    ref: "scope-diagnose",
                    keyPath: ["scopes"],
                    constraints: [{
                        comparisonKeyPath: ["name"],
                        value: "$XSAPPNAME.MtxDiagnose"
                    }],
                }, {
                    ref: "scope-subscription",
                    keyPath: ["scopes"],
                    constraints: [{
                        comparisonKeyPath: ["name"],
                        value: "$XSAPPNAME.mtcallback"
                    }],
                }, {
                    ref: "scope-update",
                    keyPath: ["scopes"],
                    constraints: [{
                        comparisonKeyPath: ["name"],
                        value: "$XSAPPNAME.mtdeployment"
                    }],
                }, {
                    ref: "scope-extend",
                    keyPath: ["scopes"],
                    constraints: [{
                        comparisonKeyPath: ["name"],
                        value: "$XSAPPNAME.ExtendCDS"
                    }],
                }, {
                    ref: "scope-extend-delete",
                    keyPath: ["scopes"],
                    constraints: [{
                        comparisonKeyPath: ["name"],
                        value: "$XSAPPNAME.ExtendCDSdelete"
                    }],
                }, {
                    ref: "template-mt-administrator",
                    keyPath: ["role-templates"],
                    constraints: [{
                        comparisonKeyPath: ["name"],
                        value: "MultitenancyAdministrator"
                    }],
                }, {
                    ref: "template-extension-developer",
                    keyPath: ["role-templates"],
                    constraints: [{
                        comparisonKeyPath: ["name"],
                        value: "ExtensionDeveloper"
                    }],
                }, {
                    ref: "template-extension-developer-undeploy",
                    keyPath: ["role-templates"],
                    constraints: [{
                        comparisonKeyPath: ["name"],
                        value: "ExtensionDeveloperUndeploy"
                    }],
                }],
            }
        )
    }

    async run() {
        const projectDescriptor = await this.projectReader.read(this.options)
        if (projectDescriptor.cap.isNodejs) {
            const packageJSONPath = path.join(this.projectPath, 'package.json')
            const cdsTemplateFile = projectDescriptor.cap.for ? 'cds.package.json.hbs' : 'cds.package.json'
            await this.templateUtil.mergeJSON(packageJSONPath, path.join(__dirname, 'files', cdsTemplateFile), projectDescriptor)
            await this.templateUtil.mergeJSON(packageJSONPath, path.join(__dirname, 'files', 'dependencies.package.json'))
            await this.templateUtil.sortDependencies(packageJSONPath)
        } else {
            const cdsrcJSONPath = path.join(this.projectPath, '.cdsrc.json')
            await this.templateUtil.mergeJSON(cdsrcJSONPath, path.join(__dirname, 'files', 'java', '.cdsrc.json'))
            await fs.copy(path.join(__dirname, 'files', 'java'), path.join(this.projectPath, 'mtx-sidecar'))
        }
        await this.runXSSecurityMerging()
        await this.runMTAMerging()
    }
}
