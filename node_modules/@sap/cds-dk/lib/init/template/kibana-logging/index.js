const cds = require('@sap/cds')
const fs = require('fs');
const path = require('path');

const ProjectReader = require('../../util/projectReader');

const TemplateBase = require('../templateBase');

const { PROJECT_TYPE, } = require('../../constants');
const { srvNode, srvJava, kibanaLogging } = require('../_merging/existences');

module.exports = class KibanaTemplate extends TemplateBase {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
        this.projectReader = new ProjectReader(this);
    }

    async runMTAMerging() {
        const mtaYAMLPath = path.join(this.projectPath, 'mta.yaml');

        if (!fs.existsSync(mtaYAMLPath)) {
            console.warn(`Cannot add Kibana Logging as there is no 'mta.yaml' deploy descriptor in your project. Run 'cds add mta' to add it.`)
            return;
        }

        const projectDescriptor = await this.projectReader.read(this.options);
        const srv = projectDescriptor.cap.isNodejs ? srvNode : srvJava

        await this.templateUtil.mergeYAML(
            mtaYAMLPath,
            `${__dirname}/files/mta.yaml.hbs`,
            projectDescriptor,
            {
                existences: [srv, kibanaLogging],
                relationships: [{
                    in: srv,
                    inKeyPath: ["requires"],
                    into: "name",
                    existences: [kibanaLogging],
                    existenceKeyPath: ["name"],
                }],
            }
        );
    }

    async run() {
        const projectType = await this.getProjectType();
        
        switch (projectType) {
            case PROJECT_TYPE.java:
            default:
                cds.error(`kibana-logging is not implemented for project type '${projectType}' yet`);
                // TODO: implement
                break;
            case PROJECT_TYPE.nodejs: {
                const projectDescriptor = await this.projectReader.read(this.options);
                const cdsTemplateFile = projectDescriptor.cap.for ? 'cds.profile.package.json.hbs' : 'cds.package.json'
                const cdsTemplatePath = path.join(__dirname, 'files', cdsTemplateFile)
                await this.templateUtil.mergeJSON(path.join(this.projectPath, 'package.json'), cdsTemplatePath, projectDescriptor)
            }
        }        
        await this.runMTAMerging()
    }
}
