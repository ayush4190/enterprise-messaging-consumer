const fs = require('fs');
const { join } = require('path');
const TemplateBase = require('../templateBase');
const ProjectReader = require('../../util/projectReader');
const { OPTION_XSUAA, PROJECT_TYPE } = require('../../constants');
const {
    srvNode, srvJava, approuter, // Modules
    xsuaa, // BTP Services
    requiredMtxAPI, requiredJavaApprouterAPI, providedJavaApprouterAPI // APIs
} = require('../_merging/existences');

module.exports = class ApprouterTemplate extends TemplateBase {
    constructor(projectPath, generator) {
        super(projectPath, generator, __dirname);
        this.projectReader = new ProjectReader(this);
    }

    async getDependencies() {
        return [OPTION_XSUAA];
    }

    async runMTAMerging() {
        const projectDescriptor = await this.projectReader.read(this.options);
        const mtaYAMLPath = join(this.projectPath, 'mta.yaml');
        if (!fs.existsSync(mtaYAMLPath)) return;
        const { isNodejs, isJava, isMultitenant } = projectDescriptor.cap
        const srv = isNodejs ? srvNode : srvJava
        const apis = isJava ? [requiredJavaApprouterAPI, providedJavaApprouterAPI] : []
        if (isNodejs && isMultitenant) apis.push(requiredMtxAPI)
        const existences = [srv, approuter, xsuaa, ...apis]
        await this.templateUtil.mergeYAML(
            mtaYAMLPath,
            `${__dirname}/files/mta.yaml.hbs`,
            projectDescriptor,
            {
                existences,
                relationships: [{
                    in: srv,
                    inKeyPath: ["requires"],
                    into: "name",
                    existences: [xsuaa],
                    existenceKeyPath: ["name"],
                }, {
                    in: approuter,
                    inKeyPath: ["requires"],
                    into: "name",
                    existences: [xsuaa],
                    existenceKeyPath: ["name"],
                }],
            }
        );
    }

    async run() {
        const projectDescriptor = await this.projectReader.read(this.options);
        const appPath = join(this.projectPath, projectDescriptor.ui.appPath || 'app');
        const appPackageJSONPath = join(appPath, 'package.json');

        await this.templateUtil.mergeJSON(appPackageJSONPath, join(__dirname, 'files', 'package.json'));
        await this.templateUtil.sortDependencies(appPackageJSONPath);

        await this.templateUtil.mergeJSON(
            `${appPath}/xs-app.json`,
            `${__dirname}/files/xs-app.json.hbs`,
            projectDescriptor
        );

        await this.templateUtil.mergeJSON(
            `${appPath}/default-env.json`,
            `${__dirname}/files/default-env.json`
        );

        // await this.fsUtil.copy(join(__dirname, 'files', 'index.html'), join(appPath, 'index.html'));

        const projectType = await this.getProjectType();
        switch (projectType) {
            case PROJECT_TYPE.java: {
                const cdsrcJSONPath = join(this.projectPath, '.cdsrc.json')
                const cdsTemplateFile = projectDescriptor.cap.for ? 'cds.cdsrc.json.hbs' : 'cds.cdsrc.json'
                const cdsPackageJSONPath = join(__dirname, 'files', cdsTemplateFile)
                await this.templateUtil.mergeJSON(cdsrcJSONPath, cdsPackageJSONPath, projectDescriptor)
                break
            }
            case PROJECT_TYPE.nodejs: {
                const packageJSONPath = join(this.projectPath, 'package.json')
                const cdsTemplateFile = projectDescriptor.cap.for ? 'cds.package.json.hbs' : 'cds.package.json'
                const cdsPackageJSONPath = join(__dirname, 'files', cdsTemplateFile)
                await this.templateUtil.mergeJSON(packageJSONPath, cdsPackageJSONPath, projectDescriptor)
                break
            }
        }

        await this.runMTAMerging()
    }
}
