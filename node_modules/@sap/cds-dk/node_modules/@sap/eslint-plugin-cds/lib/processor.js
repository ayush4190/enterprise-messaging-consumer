/**
 * Custom ESLint processor:
 * https://eslint.org/docs/developer-guide/working-with-plugins#processors-in-plugins
 * This processor is used to avoid parsing errors when this plugin is extended
 * in ESLint alongside other plugins, such as prettier which then also try to
 * read the new file types exposed via globs.
 * 
 * Note, that because we cache the file contents and return files contents,
 * the plugin's parser is bypassed so we must retrieve the file contents (see createRule()
 * in utils/rules.js).
 */

const { Cache } = require("./utils/model");
const { isValidFile } = require("./utils/helpers");

module.exports = {
  preprocess: function (text, filename) {
    if (isValidFile(filename, 'FILES')) {
      Cache.set(`file:${filename}`, text);
    }
    return [{ text: "", filename }];
  },
  /**
   * Returns message objects as defined by ESLint:
   * https://eslint.org/docs/developer-guide/working-with-custom-formatters#the-message-object
   * @param {*} messages 
   * @returns 
   */
  postprocess: function (messages) {
    const messagesSanitized = [];
    messages.forEach(fileMessages => {
      const fileMessagesSanitized = [];
      fileMessages.forEach(r => {
        if (r.message.startsWith(`CompilationError:`)) {
          r.message = r.message.replace(`CompilationError: `,
            'CDS model could not be compiled!\n');
          r.ruleId = `‚ùó${r.ruleId}`;
          r.severity = 2;
        }
        fileMessagesSanitized.push(r);
      })
      messagesSanitized.push(fileMessagesSanitized);
    })
    return [].concat(...messagesSanitized);
  },
  supportsAutofix: true,
};
