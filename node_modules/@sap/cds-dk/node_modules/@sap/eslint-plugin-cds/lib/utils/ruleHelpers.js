const SEP = "[,;\t]";
const EOL = "\\r?\\n";

const findFuzzy = require("./fuzzySearch");

module.exports = {
  /**
   *
   * @param {*} e
   */
  splitEntityName: function (e) {
    // Entity names from CSN are of the form:
    // <namespace>.<service>.<entity>.<'texts'|'localized'>|<composition value>
    let prefix = "";
    let suffix = "";
    let entityName = e.name;
    const names = entityName.split(".");
    entityName = names[names.length - 1];

    if (entityName) {
      // Managed composition get compiler tag `_up`
      let isManagedComposition = false;
      if (e.elements) {
        isManagedComposition = Object.keys(e.elements).some((k) => k === "up_");
      }
      // Check for compiler tags
      let compilerTagsToExclude = ["texts", "localized"];
      const isCompilerTag = compilerTagsToExclude.includes(entityName);

      if (isManagedComposition || isCompilerTag) {
        suffix = names[names.length - 1];
        entityName = names[names.length - 2];
      }
      prefix = e.name.split(`.${entityName}`)[0];
    }
    return { prefix, entity: entityName, suffix };
  },



  _findInCode: function (miss, code) {
    // middle
    let match = new RegExp(SEP + miss + SEP).exec(code);
    if (match) return match.index + 1;
    // end of line
    match = new RegExp(SEP + miss + EOL).exec(code);
    if (match) return match.index + 1;
    // start of doc
    match = new RegExp("^" + miss + SEP).exec(code);
    if (match) return match.index;
    // somewhere (fallback)
    return code.indexOf(miss);
  },


};