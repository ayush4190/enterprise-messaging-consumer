const { splitEntityName } = require("../utils/ruleHelpers");

module.exports = {
  meta: {
    docs: {
      description: "Regular entity names should start with uppercase letters.",
      category: "Model Validation",
      version: "1.0.4",
    },
    type: "suggestion",
    hasSuggestions: true,
    messages: {
      startUppercase: "Entity name '{{entityName}}' should start with an uppercase letter.",
      fixUppercase: "Start entity name with an uppercase letter.",
    },
    fixable: "code",
  },
  create: function (context) {
    const { cds, filePath, sourcecode } = context;

    return { entity: check_starts_uppercase };

    function check_starts_uppercase(e) {
      if (!filePath.endsWith(".cds")) return;
      const entityName = splitEntityName(e).entity;
      if (entityName.charAt(0) !== entityName.charAt(0).toUpperCase()) {
        if (e.$location && e.$location.file) {
          const file = e.$location.file;
          const loc = cds.getLocation(entityName, e);
          const fix = (fixer) => {
            const entityNameSanitized = entityName.charAt(0).toUpperCase() + entityName.slice(1);
            const rangeEnd = sourcecode.getIndexFromLoc({
              line: loc.end.line,
              column: loc.end.column,
            });
            const rangeBeg = rangeEnd ? rangeEnd - entityNameSanitized.length : 0;
            return fixer.replaceTextRange([rangeBeg, rangeEnd], entityNameSanitized);
          };
          return {
            messageId: "startUppercase",
            loc,
            file,
            data: { entityName },
            suggest: [
              {
                messageId: "fixUppercase",
                fix,
              },
            ],
          };
        }
      }
    }
  },
};
