// TODO: TEST API
//module.exports = require("../../api").createRule({ // TODO: eliminate that and allow std eslint style module.export = { ...
module.exports = {
  meta: {
    docs: {
      description: `Avoid using reserved SQL keywords.`,
      category: "Model Validation", //> values are specific for cds lint
      recommended: true,
      version: "2.1.0",
    },
    severity: "error" //> convenience option by cds.lint
  },
  create(context) {
    const { cds } = context //> specific for cds lint
    const { db = { kind: "sql" } } = cds.env.requires

    return { //> return standard eslint visitor callbacks registered to CSN kinds, types, ...
      entity: check_name_is_not_reserved,
      element: check_name_is_not_reserved
    }

    function check_name_is_not_reserved(d) {
      if (d.name in RESERVED) {
        // Do not blame in case of external services
        let srv = d._service || (d.parent && d.parent._service)
        if (srv && srv["@cds.external"]) return

        // Do blame
        return `'${d.name}' is a reserved keyword in ${db.kind.toUpperCase()}` //> convenience options by cds lint
      }
    }
  },
};

// REVISIT: Replace by compiler-provided check
const RESERVED = {
  ORDER: 1,
  Order: 1,
  order: 1,
  GROUP: 1,
  Group: 1,
  group: 1,
  LIMIT: 1,
  Limit: 1,
  limit: 1,
};
