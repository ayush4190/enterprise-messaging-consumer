#!/usr/bin/env node

const cli = { //NOSONAR

  Shortcuts: {
    i: 'init',
    a: 'add',
    y: 'bind',
    m: 'import',
    c: 'compile',
    p: 'parse',
    s: 'serve',
    w: 'watch',
    e: 'env',
    b: 'build',
    d: 'deploy',
    l: 'login',
    o: 'logout',
    x: 'extend', '-a': 'activate',
    t: 'lint',
    v: 'version', '-v':'version', '--version':'version',
    h: 'help', '?':'help', '-?':'help', '--help':'help',
    r: 'repl', '-r':'repl',
    '-e':'eval'
  },

  exec (cmd = process.argv[2], ...argv) {
    if (process[Symbol.for('ts-node.register.instance')]) {
      process.env.CDS_TYPESCRIPT = process.env.CDS_TYPESCRIPT || 'true'
    }
    require('util').inspect.defaultOptions = { colors: !!process.stderr.isTTY, depth:11 }
    if (!argv.length) argv = process.argv.slice(3)
    if (!cmd) cmd = process.stdin.isTTY ? 'help' : 'compile'
    if (cmd in this.Shortcuts) cmd = process.argv[2] = this.Shortcuts[cmd]
    if (argv.some(a => this.Shortcuts[a]==='help'))  return this.help (cmd)

    const cds_cli = require (_local('@sap/cds/bin/cds'))  // this triggers loading of sap/cds lib
    DEBUG && DEBUG (`[cds] - @sap/cds ${global.cds.version} loaded: ${global.cds.home}`)
    if (cmd !== 'repl' && process.env.NODE_ENV !== 'test')  cds_cli.errorHandlers()

    const task = this.load (cmd, /*else*/ (f)=> argv.unshift(cmd) && _defaultCompile (argv,f))
    if (task) {
      // REVISIT: '--' handling for cds bind --exec. Should be moved to cds_cli
      const endOfOptions = argv.indexOf('--')
      let appendArgs = []
      if (endOfOptions>=0) {
        appendArgs = argv.slice(endOfOptions+1)
        argv = argv.slice(0, endOfOptions)
      }
      const args = cds_cli.args(task,argv)
      args[0].push(...appendArgs)
      return task.apply (this, args)
    }
  },

  load (cmd,_default) {
    return /[^build/][\\/.-@]/.test(cmd) && _default && _default(true) // like `cds ./srv` or `cds @capire/bookshop`
    || /cds/i.test(cmd) && _dieForUnknownCommand (cmd)  // cds cds
    || _require ('./'+cmd)  // cds-dk commands
    || _require ('@sap/cds/bin/'+cmd, {paths:[process.cwd(), __dirname]}) // prefer local cds for the rest
    || _default && _default()
    || _dieForUnknownCommand (cmd)
  },

  help (cmd) { return this.exec ('help', cmd) }
}

const DEBUG = /\b(cli)\b/.test (process.env.DEBUG) && console.error

function _local (id) {
  return require.resolve (id, {paths:[process.cwd(), __dirname]})
}

function _defaultCompile (argv, _force) {
  // Try all arguments if one resolves to a model.  If yes, we assume 'compile' is intended.
  const model = _force || require (_local('@sap/cds')).resolve(argv)
  if (model)  return _require ('./compile')
  DEBUG && DEBUG (`[cds] - Command is not a model to compile: ${argv}`)
}

function _dieForUnknownCommand(cmd) {
  const term = require('../lib/util/term');
  const fuzzySearch = _require('./util/fuzzySearch');

  const commands = Array.from(new Set(Object.values(cli.Shortcuts))).sort();
  let bestMatchText = '';

  const bestMatches = fuzzySearch(cmd, commands, DEBUG);

  switch (bestMatches.length) {
    case 0:
      bestMatchText = '';
      break;
    case 1:
      bestMatchText = `A similar command is \n\n  ${term.bold("cds " + bestMatches[0])}`;
      break;
    default:
      bestMatchText = `Similar commands are \n\n  ${term.bold("cds " + bestMatches.join('\n  cds '))}`;
  }

  const msg = `
  Unknown command '${term.bold(cmd)}'. ${bestMatchText}

  Haven't found the proper command yet? Here are all supported commands:
  ${term.bold(commands.join(', '))}

  You can use ${term.bold("cds help {command}")} to get more information on the command.
`
  console.error(msg)

  process.exit(1)
}

function _require (id,o) {
  try { var resolved = require.resolve(id,o) } catch(e){ DEBUG && DEBUG (`[cds] - Command not found: ${id}`); return }
  DEBUG && DEBUG (`[cds] - Command resolved: ${resolved}`)
  return require (resolved)
}

function _minVersion (id, minVersion) {
  const { version } = require (_local (id+'/package.json'))
  return version.split('.')[0] >= minVersion
}

if (_minVersion ('@sap/cds', 4)) {
  module.exports = Object.assign ((..._) => cli.exec(..._), cli)
}
else { // TODO compat to cds 3 remove after a while.
  module.exports = require (_local('@sap/cds/bin/cds'))
}
if (!module.parent)  module.exports()

/* eslint no-console:off */
